#!/bin/bash -eu

export PATH="/var/vcap/packages/cf-cli-6-linux/bin:$PATH"
export CF_HOME=`pwd`/home/cf
export CF_DIAL_TIMEOUT=<%= p('nfsbrokerpush.cf.dial_timeout') %>

SCHEME=https
DOMAIN=<%= p('nfsbrokerpush.domain') %>
API_ENDPOINT=$SCHEME://api.$DOMAIN
ORG=<%= p('nfsbrokerpush.organization') %>
SPACE=<%= p('nfsbrokerpush.space') %>
APP_NAME=<%= p('nfsbrokerpush.app_name') %>
SERVICE_BROKER_NAME=<%= p('nfsbrokerpush.broker_name') %>
SERVICES_CONFIG=/var/vcap/jobs/nfsbrokerpush/config/services.json
SYSLOG_URL="<%= p('nfsbrokerpush.syslog_url') %>"
MANIFEST=/var/vcap/jobs/nfsbrokerpush/manifest.yml
PROCFILE=/var/vcap/jobs/nfsbrokerpush/Procfile
STARTUP_SCRIPT=/var/vcap/jobs/nfsbrokerpush/start.sh
DB_CA_CERT=/var/vcap/jobs/nfsbrokerpush/db_ca.crt
CREDHUB_CA_CERT=/var/vcap/jobs/nfsbrokerpush/credhub_ca.crt
USERNAME="<%= p('nfsbrokerpush.username') %>"
PASSWORD="<%= p('nfsbrokerpush.password') %>"
APP_URL=$SCHEME://$APP_NAME.$DOMAIN

mkdir -p $CF_HOME

ERROR_EXIT_CODE=<%= p('nfsbrokerpush.error_on_misconfiguration') ? 1 : 0 %>
DEPLOYMENT_STATUS=0

function authenticate_and_target() {
  cf api $API_ENDPOINT <% if p('nfsbrokerpush.skip_cert_verify') %>--skip-ssl-validation<% end %>
  <% if_p('nfsbrokerpush.cf.client_id', 'nfsbrokerpush.cf.client_secret') do |client_id, client_secret| %>
    cf auth "<%= client_id %>" "<%= client_secret %>" --client-credentials
  <% end.else do %>
    cf auth "<%= p('nfsbrokerpush.cf.admin_user') %>" "<%= p('nfsbrokerpush.cf.admin_password') %>"
  <% end %>
  cf create-org $ORG
  cf target -o $ORG
  cf create-space $SPACE
  cf target -s $SPACE
}

function create_sql_security_group() {
  cf create-security-group sql_open /var/vcap/jobs/nfsbrokerpush/sql.json
  cf update-security-group sql_open /var/vcap/jobs/nfsbrokerpush/sql.json
  cf bind-security-group sql_open $ORG $SPACE
}

function create_credhub_security_group() {
  cf create-security-group credhub_open /var/vcap/jobs/nfsbrokerpush/credhub.json
  cf update-security-group credhub_open /var/vcap/jobs/nfsbrokerpush/credhub.json
  cf bind-security-group credhub_open $ORG $SPACE
}

function create_manifest() {
  cat $MANIFEST | sed 's/PASSWORD: "[^"]*"/PASSWORD: ****/g'
  cp -f $MANIFEST /var/vcap/packages/nfsbroker/manifest.yml
  cp -f $PROCFILE /var/vcap/packages/nfsbroker/Procfile
  cp -f $STARTUP_SCRIPT /var/vcap/packages/nfsbroker/start.sh
  chmod +x /var/vcap/packages/nfsbroker/start.sh
  cp -f $SERVICES_CONFIG /var/vcap/packages/nfsbroker/services.json
<% if_p('nfsbrokerpush.db.ca_cert') do |ca_cert| %>
  cp -f $DB_CA_CERT /var/vcap/packages/nfsbroker/db_ca.crt
<% end %>
<% if_p('nfsbrokerpush.credhub.ca_cert') do |ca_cert| %>
  cp -f $CREDHUB_CA_CERT /var/vcap/packages/nfsbroker/credhub_ca.crt
<% end %>

}

function create_logging_service() {
  local LOGGER_NAME=$APP_NAME-logger
  set +e
    cf service $LOGGER_NAME --guid
    local exit_code=$?
  set -e

  if [[ -z "$SYSLOG_URL" ]]; then
    echo "Syslog URL is not set."

    if [[ $exit_code -eq 0 ]]; then
      cf unbind-service $APP_NAME $LOGGER_NAME
      cf delete-service $LOGGER_NAME -f
    fi

    return
  fi

  if [[ $exit_code -ne 0 ]]; then
    cf create-user-provided-service $LOGGER_NAME -l $SYSLOG_URL
  else
    cf update-user-provided-service $LOGGER_NAME -l $SYSLOG_URL
  fi

  cf bind-service $APP_NAME $LOGGER_NAME
}

function push_app() {
  local exit_code

  mkdir -p /var/vcap/data/tmp
  export TMPDIR=/var/vcap/data/tmp

  local app_stack
  app_stack="cflinuxfs2"

  if [[ -n "`cf stacks | grep cflinuxfs3`" ]]; then
    app_stack="cflinuxfs3"
  fi

  pushd /var/vcap/packages/nfsbroker > /dev/null
    set +e
      cf push "${APP_NAME}" -i 1 -s ${app_stack}
      exit_code=$?
    set -e

    if [[ $exit_code -ne 0 ]]; then
      cf logs "${APP_NAME}" --recent
      exit "${exit_code}"
    fi
  popd > /dev/null
}

function register_service() {
  cf create-service-broker $SERVICE_BROKER_NAME $USERNAME $PASSWORD $APP_URL || cf update-service-broker $SERVICE_BROKER_NAME $USERNAME $PASSWORD $APP_URL
}

function print_deployment_status() {
  if [[ $DEPLOYMENT_STATUS != 0 ]]; then
    echo "Deployment failed!"
    exit 1
  fi

  echo "Deployment succeeded!"
}

cf -v

authenticate_and_target
create_manifest
<% if p('nfsbrokerpush.create_sql_security_group') %>
  create_sql_security_group
<% end %>
<% if p('nfsbrokerpush.create_credhub_security_group') %>
  create_credhub_security_group
<% end %>
push_app
create_logging_service
<% if p('nfsbrokerpush.register_broker') %>
  register_service
<% end %>
print_deployment_status
